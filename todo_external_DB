<?xml version="1.0" encoding="UTF-8"?>  
<datasources>  
        <datasource jndi-name="java:/rackspaceDB" pool-name="rackspace" enabled="true" jta="true" use-ccm="false">
                <connection-url>jdbc:sqlserver://someURL:1433;databaseName=amri;sendStringParametersAsUnicode=false;</connection-url>
                <driver>sqlserver</driver>
                <pool>
                        <min-pool-size>5</min-pool-size>
                        <max-pool-size>10</max-pool-size>
                </pool>
                <security>
                        <user-name>someUserName</user-name>
                        <password>somePassword</password>
                </security>
                <validation>
                        <validate-on-match>false</validate-on-match>
                        <background-validation>false</background-validation>
                        <background-validation-millis>0</background-validation-millis>
                </validation>
                <statement>
                        <prepared-statement-cache-size>0</prepared-statement-cache-size>
                        <share-prepared-statements>false</share-prepared-statements>
                </statement>
        </datasource>
</datasources>
then declare that datastore definition to the JSON file
// Datastore definitions
	dataStores: {
		// Skyve data store
		"skyve": {
... (leave this one alone)
		},
		// Rackspace data store
		"Rackspace": {
			// JNDI name
			jndi: "java:/rackspaceDB",
			// Dialect
			dialect: "org.skyve.impl.persistence.hibernate.dialect.SQLServer2008SpatialDialect"
		},
	},
Add a method like this to a Util class
public static Connection getPooledConnection(String datasource) throws IllegalStateException {
		Connection result = null;
		try {
			InitialContext ctx = new InitialContext();
			DataSource ds = (DataSource) ctx.lookup(datasource);
			result = ds.getConnection();
			result.setAutoCommit(false);
		} catch (SQLException e) {
			throw new IllegalStateException("Could not get a database connection", e);
		} catch (NamingException e) {
			throw new IllegalStateException("Could not find the JDBC connection pool", e);
		}
		return result;
	}
Then we can do SQL like this
		StringBuilder sql = new StringBuilder();
		try (Connection connection = getPooledConnection(Rackspace_DataSource)) {
			try (Statement statement = connection.createStatement()) {
				sql.append("select *");
				sql.append(" from mytable");
				try (ResultSet rS = statement.executeQuery(sql.toString())) {
					// if you do DML in here the
					// connection.commit()
					while (rS.next()) {
							System.out.println(rS.getInt("id"));
							System.out.println(rS.getString("description"));
...